//
// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// 2019 OKIMS
//      ported to solidity 0.6
//      fixed linter warnings
//      added requiere error messages
//
//
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;
library Pairing {
    struct G1Point {
        uint X;
        uint Y;
    }
    // Encoding of field elements is: X[0] * z + X[1]
    struct G2Point {
        uint[2] X;
        uint[2] Y;
    }
    /// @return the generator of G1
    function P1() internal pure returns (G1Point memory) {
        return G1Point(1, 2);
    }
    /// @return the generator of G2
    function P2() internal pure returns (G2Point memory) {
        // Original code point
        return G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );

/*
        // Changed by Jordi point
        return G2Point(
            [10857046999023057135944570762232829481370756359578518086990519993285655852781,
             11559732032986387107991004021392285783925812861821192530917403151452391805634],
            [8495653923123431417604973247489272438418190587263600148770280649306958101930,
             4082367875863433681332203403145435568316851327593401208105741076214120093531]
        );
*/
    }
    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.
    function negate(G1Point memory p) internal pure returns (G1Point memory r) {
        // The prime q in the base field F_q for G1
        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
        if (p.X == 0 && p.Y == 0)
            return G1Point(0, 0);
        return G1Point(p.X, q - (p.Y % q));
    }
    /// @return r the sum of two points of G1
    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {
        uint[4] memory input;
        input[0] = p1.X;
        input[1] = p1.Y;
        input[2] = p2.X;
        input[3] = p2.Y;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require(success,"pairing-add-failed");
    }
    /// @return r the product of a point on G1 and a scalar, i.e.
    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.
    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) {
        uint[3] memory input;
        input[0] = p.X;
        input[1] = p.Y;
        input[2] = s;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require (success,"pairing-mul-failed");
    }
    /// @return the result of computing the pairing check
    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should
    /// return true.
    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {
        require(p1.length == p2.length,"pairing-lengths-failed");
        uint elements = p1.length;
        uint inputSize = elements * 6;
        uint[] memory input = new uint[](inputSize);
        for (uint i = 0; i < elements; i++)
        {
            input[i * 6 + 0] = p1[i].X;
            input[i * 6 + 1] = p1[i].Y;
            input[i * 6 + 2] = p2[i].X[0];
            input[i * 6 + 3] = p2[i].X[1];
            input[i * 6 + 4] = p2[i].Y[0];
            input[i * 6 + 5] = p2[i].Y[1];
        }
        uint[1] memory out;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require(success,"pairing-opcode-failed");
        return out[0] != 0;
    }
    /// Convenience method for a pairing check for two pairs.
    function pairingProd2(G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](2);
        G2Point[] memory p2 = new G2Point[](2);
        p1[0] = a1;
        p1[1] = b1;
        p2[0] = a2;
        p2[1] = b2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for three pairs.
    function pairingProd3(
            G1Point memory a1, G2Point memory a2,
            G1Point memory b1, G2Point memory b2,
            G1Point memory c1, G2Point memory c2
    ) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](3);
        G2Point[] memory p2 = new G2Point[](3);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for four pairs.
    function pairingProd4(
            G1Point memory a1, G2Point memory a2,
            G1Point memory b1, G2Point memory b2,
            G1Point memory c1, G2Point memory c2,
            G1Point memory d1, G2Point memory d2
    ) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](4);
        G2Point[] memory p2 = new G2Point[](4);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p1[3] = d1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        p2[3] = d2;
        return pairing(p1, p2);
    }
}
contract Verifier {
    using Pairing for *;
    struct VerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        Pairing.G1Point[] IC;
    }
    struct Proof {
        Pairing.G1Point A;
        Pairing.G2Point B;
        Pairing.G1Point C;
    }
    function verifyingKey() internal pure returns (VerifyingKey memory vk) {
        vk.alfa1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [4252822878758300859123897981450591353533073413197771768651442665752259397132,
             6375614351688725206403948262868962793625744043794305715222011528459656738731],
            [21847035105528745403288232691147584728191162732299865338377159692350059136679,
             10505242626370262277552901082094356697409835680220590971873171140371331206856]
        );
        vk.gamma2 = Pairing.G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );
        vk.delta2 = Pairing.G2Point(
            [18733881729924258691791679204727288037673031651128653677007783590384260677540,
             1472319218476460904988316933413171905226912981384020122162681775355133079263],
            [7986009128308299326683206373359713899389288357909298496498439243161860098608,
             14186074981120320958365559710950123212666289892800643391471993004767664551425]
        );
        vk.IC = new Pairing.G1Point[](103);
        
        vk.IC[0] = Pairing.G1Point( 
            18759378048774289581021923348187373954609448660499281711036049796358426761806,
            2061140906739812200756114547053554091797769155588611267701565934147685724847
        );                                      
        
        vk.IC[1] = Pairing.G1Point( 
            1234792590356677587185052168194350357161816618210634871182219450457801587254,
            16044645453167066688913951276535478914198293623187412050357941701233387302233
        );                                      
        
        vk.IC[2] = Pairing.G1Point( 
            17985570137497555154065410352342369306911028438494808701254576748588821204394,
            20035957405991900875273122249696233456438245166244347721651720310658710478677
        );                                      
        
        vk.IC[3] = Pairing.G1Point( 
            1261433981448625169184448780739491417399875247807724274986601051716750070695,
            1863597491368413495155366021569871948520115343124582774608077770914641531193
        );                                      
        
        vk.IC[4] = Pairing.G1Point( 
            5131684280068286399858955521444240828986807373320696103264996852328939493772,
            9103621492810581675167415682181056362423318988562103070908500983948521288728
        );                                      
        
        vk.IC[5] = Pairing.G1Point( 
            18462394850693632012601418299337952679604938221507801345919373595217340128031,
            7716217517636228178470289163484638642819390609808213264826155444049397435222
        );                                      
        
        vk.IC[6] = Pairing.G1Point( 
            18854619271867439603464983689907374629106753524020987314335299686200368577204,
            21052818207778204055314795813268020436647398825295663839026808595709940426042
        );                                      
        
        vk.IC[7] = Pairing.G1Point( 
            20713551977618084638766504895236154271259589222909679943257863828748879493300,
            12297157019881050092144465199183187459284397628885471538821169640378665667888
        );                                      
        
        vk.IC[8] = Pairing.G1Point( 
            6471391812153783237929061924644063986649894652785753286220634053775750420754,
            17874672156607223992271715622234156230097747761837235631237473529189796771043
        );                                      
        
        vk.IC[9] = Pairing.G1Point( 
            6338244823727014839566011258159145249818021703696260942607442202067093823843,
            9219622488869301271788417770784512650733419236124085469897636031250403433807
        );                                      
        
        vk.IC[10] = Pairing.G1Point( 
            5125181867310996237003927604944092229731446114159920214850188375714236843215,
            5431601572174674757518046310367503478135403285683044200668904726045928025389
        );                                      
        
        vk.IC[11] = Pairing.G1Point( 
            15210984034124680791578878843915254048404397844035001886116416319478528195630,
            7902762464246924344477788646891516441302472232169542022346507855693264140097
        );                                      
        
        vk.IC[12] = Pairing.G1Point( 
            20564148244524178796962205554370322979683984663971780472142148778811798075379,
            13484071999318464621408069892803316148503906988642422619305461825926819149755
        );                                      
        
        vk.IC[13] = Pairing.G1Point( 
            14182926926719200444109716467434603367615040935102537391069030345017538117153,
            1343522158318772251703526158296500120559983644959061125138976552330938627640
        );                                      
        
        vk.IC[14] = Pairing.G1Point( 
            15046322347529792039270635293332621451380554420334886918360929409613208950279,
            16793910135106425912294117247877365760649578387847615451832617716086960244456
        );                                      
        
        vk.IC[15] = Pairing.G1Point( 
            15671084400428353316491723010048472572798162904788417916192995049005035056429,
            4409340329303994473638396313032781708629374875372107126400259723636359978788
        );                                      
        
        vk.IC[16] = Pairing.G1Point( 
            8966158572876393785149649589086560632533259336906770186468840449231455593233,
            14456035483764688470537054256539969827509173444019361905504863310205562235500
        );                                      
        
        vk.IC[17] = Pairing.G1Point( 
            7890358493425270875572504786173856284409638313084202755899113079222054354115,
            14372354556673126607698384171496802126655902065907585837849958242427871417748
        );                                      
        
        vk.IC[18] = Pairing.G1Point( 
            6074716832915004233854982354646607006934012295070184386575789504517947516109,
            18401592320881556673918151733705118443176139751461869223286842586690494079889
        );                                      
        
        vk.IC[19] = Pairing.G1Point( 
            7237245952692225218571537694176049646938065656800998421322550946694303355650,
            1239411637957279014993531596336740560874349812225500074448156721595053696341
        );                                      
        
        vk.IC[20] = Pairing.G1Point( 
            21040724444928004896598848758522378851472587158469764683311519794590997238883,
            372653483786183401981144285304020036520975764655149813558839398836792352906
        );                                      
        
        vk.IC[21] = Pairing.G1Point( 
            17372740151862568588581288089285042092360658965562867167063096600380804680915,
            8818098698453378398505206048150786127868097152549365787330030599237752017454
        );                                      
        
        vk.IC[22] = Pairing.G1Point( 
            6092816239517655676994945021633551865377174132754152711789428275029060557297,
            8512512759518843609767037314563068207903402811359069802844692710435439677093
        );                                      
        
        vk.IC[23] = Pairing.G1Point( 
            14646629031139824748450987228296037879592502012814679267051509216245338769623,
            16168482508389160942631528916244505779400423012050853060655388316485654591093
        );                                      
        
        vk.IC[24] = Pairing.G1Point( 
            10266777210611665119211214360825592659583872088974749786525488083847861615908,
            7602698815559786746032953903728672522382297676373831313584175712137951417291
        );                                      
        
        vk.IC[25] = Pairing.G1Point( 
            6464222169341341086855426652579377357737270187710568594386292650683383580066,
            13078037197577474621828455454579632823153366073165444978166207140344510969531
        );                                      
        
        vk.IC[26] = Pairing.G1Point( 
            8732578634110185608690028081369263886627001940327164970363275908678016415800,
            1223547116458423867674016984521352923296274169438608591379494441397562203491
        );                                      
        
        vk.IC[27] = Pairing.G1Point( 
            16259758594760616430932250957083955927098454572622147065685759248865609928671,
            21361921946261591053044174247225977856906648672603954513240917921055189566891
        );                                      
        
        vk.IC[28] = Pairing.G1Point( 
            13850605451744925791054405760945449436357048830817318791942954763733844860927,
            2631970103777528636879270048407205085895044868587326839508335991872646115757
        );                                      
        
        vk.IC[29] = Pairing.G1Point( 
            2986214485179522419374824549373939367467443863595014841825101268592237447766,
            10092078404580075128317476429377004004255369416499108684926631701069367417929
        );                                      
        
        vk.IC[30] = Pairing.G1Point( 
            15489642756989530273927560988187407761993786537440492771153759285032079456603,
            6992888291793580584605956528955032404873556950796177951976723518462801713664
        );                                      
        
        vk.IC[31] = Pairing.G1Point( 
            18328885265226150524475720474567955982405920467264885700958185151421930675345,
            15031202122116137412752418501391875625909847338486366762774480841469749999738
        );                                      
        
        vk.IC[32] = Pairing.G1Point( 
            1764995922478424288956979508067434314512597013224328279268130157980552592468,
            4599344719899436443719924256177664070162665187897866710927908121728301611202
        );                                      
        
        vk.IC[33] = Pairing.G1Point( 
            14480175943818655192714053015510328508092826850698228777948339580930353932748,
            1607634401668891564359411176465949509465998145279160597312608483394768518110
        );                                      
        
        vk.IC[34] = Pairing.G1Point( 
            18129715441579286762606019118359614080438523562593075695850725353554950795132,
            19916845908888883877334486693804796708937885293858034349830230876837283830915
        );                                      
        
        vk.IC[35] = Pairing.G1Point( 
            10198078410728255098146219907264299356939493398793549642818059934285916899461,
            9366450101387896969150278065586231497241852259382954524530519636535501199450
        );                                      
        
        vk.IC[36] = Pairing.G1Point( 
            14627478638422342869265514945008208961492289248764825310340646777220368647838,
            15158174393330731599277380713368713702931553453934707816055425576933177422606
        );                                      
        
        vk.IC[37] = Pairing.G1Point( 
            17042146663406917833804740255410195648780917505418725083051577734208678172,
            13294605559429649964570739648461124185299337651017428855267147454462483389858
        );                                      
        
        vk.IC[38] = Pairing.G1Point( 
            17080273654266486331705242210175746250792529255129113852334778726759194218602,
            12875889679309242491752804679422838890108992529751405432028171865989963748104
        );                                      
        
        vk.IC[39] = Pairing.G1Point( 
            20690860344641397859215687280383071001200591964845336878957358911948483531653,
            9647894527996822337929771463303953844978345081791037300502610864454918025132
        );                                      
        
        vk.IC[40] = Pairing.G1Point( 
            8422670159262721728168331626259965242788017921322541060363220823311712814193,
            1071197261068083032392452054446432497468614616002436206878872841733589433189
        );                                      
        
        vk.IC[41] = Pairing.G1Point( 
            21596212227231023099139254804698563846145821299339313101537165207360246005489,
            16792523107053311780666320218834908791170037653263262412431103597173013830709
        );                                      
        
        vk.IC[42] = Pairing.G1Point( 
            14912398181301234839209204075904966641539455484126522089876655045917308220457,
            15292574897621574366798824194526373680161542064548685798375921760616820701930
        );                                      
        
        vk.IC[43] = Pairing.G1Point( 
            4233404605733732173619294250488763875055781484788405971389577021946146138631,
            13535658502129476034455556418386625492857670960610438996712927290323353501034
        );                                      
        
        vk.IC[44] = Pairing.G1Point( 
            15164785364055970818878293406196785939897380473424293066588259095904243710797,
            11487529003251934729341311513883306325864120250984153455660651365625881179666
        );                                      
        
        vk.IC[45] = Pairing.G1Point( 
            4644123109956572154906104161843991980259255939971077019149826308256021420945,
            21031956570562899972672243365550487529762322054260523166929703312036504336554
        );                                      
        
        vk.IC[46] = Pairing.G1Point( 
            5131873316638413933353147559405864052780875364195583376620854736913664165002,
            6418722228885695363395395277101648491373842500216550542450955892538533381253
        );                                      
        
        vk.IC[47] = Pairing.G1Point( 
            17023007852639085097626370477862069516706444159033438802533192938604066633926,
            4750575615231126130733775531559389433486320426954923004636149809809318225104
        );                                      
        
        vk.IC[48] = Pairing.G1Point( 
            9722703485116373065931703985148147217600788636531007298185137108002154420666,
            16939936860591416526092219979556870635167186460036976239588017189959353461901
        );                                      
        
        vk.IC[49] = Pairing.G1Point( 
            6222841172925869700537803824162531410097753618760146766645495515101370469067,
            11252025292721825963183103696268546850040321933663857485117862462774945773235
        );                                      
        
        vk.IC[50] = Pairing.G1Point( 
            16584038072429029613323370624882961368580222029504709936081989431360597027380,
            8251972357030986545022638394392419589039287425608467212467551262825040658460
        );                                      
        
        vk.IC[51] = Pairing.G1Point( 
            3636502751413031865896011998221065685086708665973215223329439080699930659235,
            2319316058894166935628527358129934837025664434607857164815528956869639485503
        );                                      
        
        vk.IC[52] = Pairing.G1Point( 
            19032746763106942086495972444559081118927741834842597198128511242328061374331,
            15896034566109418196759012317856141820730191466512719426460606515643088418325
        );                                      
        
        vk.IC[53] = Pairing.G1Point( 
            10811645318799953628778783512566808187183720409397161076940337745233339288559,
            3476812339343407824074528231193044453754744305167812450290921424015085025295
        );                                      
        
        vk.IC[54] = Pairing.G1Point( 
            12079481708659454460408689901855740658607573279410593206874524163215753024094,
            19654450444463562630249338762441941112766213289542857445469894818824634995217
        );                                      
        
        vk.IC[55] = Pairing.G1Point( 
            2067087543484395308286720913222271761406009045114657846511332693799423336073,
            3750093902757079912092290051856631972231412994437225909379791116397066740157
        );                                      
        
        vk.IC[56] = Pairing.G1Point( 
            20392148381404753787381657318298736301372731155473831199771636487203388844851,
            14251164943596300400577938555952026583558587090456012210853857385696436092237
        );                                      
        
        vk.IC[57] = Pairing.G1Point( 
            3869534575445703099238806965474646852572507736212942570333271808877858462485,
            6522484667010602084755808310376999273950439750834274172088827170712350457196
        );                                      
        
        vk.IC[58] = Pairing.G1Point( 
            11820506023881675710227684228363584171466673272238082409120338100488691898650,
            21060147153330673610395145961790591927459637301498089787259404989472731893564
        );                                      
        
        vk.IC[59] = Pairing.G1Point( 
            19323294959272111730789442259386624437411626709745673603792280860118487764049,
            20567676557074117394200633673689855357794445555121838681433219728455973909383
        );                                      
        
        vk.IC[60] = Pairing.G1Point( 
            10096729630410077248721432713653250821494471957057854509617257661354644917721,
            93919492099286173497127777706296852310922896441536220283578289155062925240
        );                                      
        
        vk.IC[61] = Pairing.G1Point( 
            13235840702096617643497669148500299676960370639409914408555006165788266240675,
            1491275114857777785627326345271844083858053659455475236632318197982074892226
        );                                      
        
        vk.IC[62] = Pairing.G1Point( 
            14961440562202063464107113085162959556530818429568269726269030396400798739208,
            15366996576362875500588333005723228061154289074727705183345003933438142709368
        );                                      
        
        vk.IC[63] = Pairing.G1Point( 
            6047637185123757516582325129939478897127637444179254379628425407588562508898,
            18986376425714963719446632040408988738222291206600605485193852280724538897744
        );                                      
        
        vk.IC[64] = Pairing.G1Point( 
            6479722669820653522475733956034990155632253036701048078437543463623272936072,
            12461139656015830707149998521979010136272101916349038758360113329650256647772
        );                                      
        
        vk.IC[65] = Pairing.G1Point( 
            15503755579773238804978785349404178657277169222046057314145983720999641597702,
            21859556060817504923126166815892622933825548823785025823909226584697686879150
        );                                      
        
        vk.IC[66] = Pairing.G1Point( 
            1156208408455138582723129082492395384780946771598938020260123838173098507840,
            10788215566176517342750176390646146534826584691880644812471992956444342822978
        );                                      
        
        vk.IC[67] = Pairing.G1Point( 
            12776635883249881540195547236206468500732411048518893077771613224671945631078,
            16687382502897053802301339605347032104776167769951802742182296037365054155481
        );                                      
        
        vk.IC[68] = Pairing.G1Point( 
            1400970488975097257567531211758076830460679180861364584547361421558841582509,
            16797808726412055111608924641287432309950752288705044825798576656164474347947
        );                                      
        
        vk.IC[69] = Pairing.G1Point( 
            18919705699948765119969051210460363541752444745868310891527383833086057462960,
            6728280843448779342620207085607048708425758197549261597062454528826734496332
        );                                      
        
        vk.IC[70] = Pairing.G1Point( 
            9529148863130222390051956891562595479975019882536309711921320364880843755281,
            1871894492389217731172964528415805798436333142464894907508260129939656183211
        );                                      
        
        vk.IC[71] = Pairing.G1Point( 
            21641166820163478480681747772491196103448476346907018981315548010260611432645,
            15105457845123623332399993376585236120190299212178497223218285169858672858631
        );                                      
        
        vk.IC[72] = Pairing.G1Point( 
            9553770008085913077858037446558591034117158740077181651954259045151759808087,
            2479579512727655529660150467047676933158221285871729796602117871749234341839
        );                                      
        
        vk.IC[73] = Pairing.G1Point( 
            13837204173874690705252383727681304664286542928791935882880044204314129148600,
            1618596718946262771243957634347584115507812847159227116492399973323798126041
        );                                      
        
        vk.IC[74] = Pairing.G1Point( 
            14829977617840454849065759990916755195659751587688388199333071077526399576010,
            1171437779032219262778140126049424862104449754825289190829328723666096870067
        );                                      
        
        vk.IC[75] = Pairing.G1Point( 
            1125859045219519324786154074765273406359123906963111166914149970914544162483,
            7960709771210610821910404522420485445004763205934784832910192254889236979380
        );                                      
        
        vk.IC[76] = Pairing.G1Point( 
            18709903675177920926622606149929106599292783279970340336127359408420047945882,
            12654931483076469819428572336224090772911465883266074259919007896846569000612
        );                                      
        
        vk.IC[77] = Pairing.G1Point( 
            964190491562068904625478259584675364678126531560395505178872931672856495402,
            17959194235991170060254733040876243238502284702066580623068999155673967706505
        );                                      
        
        vk.IC[78] = Pairing.G1Point( 
            403598581996870989058589044383456766425683292661454991516619445861339873924,
            15296199960725441636462568106800661140859315844929031120111236765718010689521
        );                                      
        
        vk.IC[79] = Pairing.G1Point( 
            13534141849386020175894116501307446268574256306063731203677433254222057956188,
            8970536733723300834256338364001088897151251511822024788895033661730898519423
        );                                      
        
        vk.IC[80] = Pairing.G1Point( 
            19154904412177988994176167884941309302731472019579483183956329802470915462754,
            1114944081060618014093536496709471285330042401038563043540137457397089492084
        );                                      
        
        vk.IC[81] = Pairing.G1Point( 
            14670441967316254588792196184828729864658056601773968418251415297183626427780,
            19254977761647359841340329385876440199820317959958446605999322769486638754796
        );                                      
        
        vk.IC[82] = Pairing.G1Point( 
            14303594534411249275737440412587294226778559781106156231441716614437923454622,
            21136804190813190517779104364867040127292340872448650862821046416771480867360
        );                                      
        
        vk.IC[83] = Pairing.G1Point( 
            20184270811863689786052972000219509497502484352014559608533689440183089968859,
            19434548426462384493204673894827796608666449836961531617042314998502302964504
        );                                      
        
        vk.IC[84] = Pairing.G1Point( 
            18682694890973036717102206792228155165063067772611924969906656245199838451148,
            18453172710494518677137941450878638620427333210389852613649285996013873881430
        );                                      
        
        vk.IC[85] = Pairing.G1Point( 
            9028115423971830203224139256726775349314777001927081103070975079611490232791,
            1396228470837678012375465053155230920951437209235419902050153103311388473348
        );                                      
        
        vk.IC[86] = Pairing.G1Point( 
            7073916041120214788677557879945507622928202488977505313969680042235592346054,
            1677083160000847941239915424752994601466268993877689721490742875781042722189
        );                                      
        
        vk.IC[87] = Pairing.G1Point( 
            11097531578132161469702890886013293184611791125412746644429906279226518712183,
            20141416028402745583987196106270144364508330142903044982152116222863399626444
        );                                      
        
        vk.IC[88] = Pairing.G1Point( 
            15882724261441848664529990908656726373134435006070940590576045127218765141213,
            661549713067354479484379784771797378222912887853759617067765795689235329690
        );                                      
        
        vk.IC[89] = Pairing.G1Point( 
            4385760387389526317639447169556152183875892201856513267186039916722364048619,
            17664724819630015181003794771669879097469660573507599968462213787169895625381
        );                                      
        
        vk.IC[90] = Pairing.G1Point( 
            7374673444190163663674431976016489912433498680250615011786535150909552371886,
            4816929387376288784130676884920945650108388088892076682414460560592376570882
        );                                      
        
        vk.IC[91] = Pairing.G1Point( 
            14636536761203006541710441589345129838836655250482184926293202507356385590327,
            8706985281322172274966899271450700132141845686258140622110268264711110164174
        );                                      
        
        vk.IC[92] = Pairing.G1Point( 
            13525049291106233768106539701669835011985713518138397529693144369555060054087,
            15001434481214947399967745291975330705683650465949762014630096843561597219448
        );                                      
        
        vk.IC[93] = Pairing.G1Point( 
            10560025024471188880474914239896744195160808282110033069599156832165404981811,
            19109006441525346407289878370176568952935141160647218268283743374431532255177
        );                                      
        
        vk.IC[94] = Pairing.G1Point( 
            611123669122622896438961798767467859883740256477880346888408292676385072089,
            2092977513834658414850354307033870456386695811910954492804021116414797397645
        );                                      
        
        vk.IC[95] = Pairing.G1Point( 
            20721708079503165391361319621598793145505921857587251924560052167735921659873,
            10116868504206030508277356032874933809648629109681757768371591076866120803373
        );                                      
        
        vk.IC[96] = Pairing.G1Point( 
            10661211310633606763901453808634107936212586918172288299500853574122264739449,
            1798068503184695435627318705402635870711719356530071676806611449302593138903
        );                                      
        
        vk.IC[97] = Pairing.G1Point( 
            4248243653137873063628621118492401659058179101509931873456670260617057801594,
            4374725505009555521686600424188011699940788188996094009195990841006253234594
        );                                      
        
        vk.IC[98] = Pairing.G1Point( 
            8914773400722342728738078645215476372359840440318940457270545828923155348897,
            20221408386066133557322754913064459225736851188474387441622362485027522500889
        );                                      
        
        vk.IC[99] = Pairing.G1Point( 
            18102523657892296761993944800823480245593984113543461440861526951767056801408,
            7271405444658135951994434076066946267337213712340301911875453287093812785455
        );                                      
        
        vk.IC[100] = Pairing.G1Point( 
            20907387605906453748826968256929971540521859850841859575879589888799837064618,
            19592427024879877566014378291002091964153419798440749928864589244157069366290
        );                                      
        
        vk.IC[101] = Pairing.G1Point( 
            2337579360748089019999051727353911083714951198475720234926635746874792963100,
            9030881407065445480309605907849271445450211759738336067667608513348776303116
        );                                      
        
        vk.IC[102] = Pairing.G1Point( 
            1607557375594354198142606683943837651322564538005258019137169924314409432216,
            10707622565654528557148364007009412918778756379141502951547841757648135006276
        );                                      
        
    }
    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {
        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
        VerifyingKey memory vk = verifyingKey();
        require(input.length + 1 == vk.IC.length,"verifier-bad-input");
        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);
        for (uint i = 0; i < input.length; i++) {
            require(input[i] < snark_scalar_field,"verifier-gte-snark-scalar-field");
            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));
        }
        vk_x = Pairing.addition(vk_x, vk.IC[0]);
        if (!Pairing.pairingProd4(
            Pairing.negate(proof.A), proof.B,
            vk.alfa1, vk.beta2,
            vk_x, vk.gamma2,
            proof.C, vk.delta2
        )) return 1;
        return 0;
    }
    /// @return r  bool true if proof is valid
    function verifyProof(
            uint[2] memory a,
            uint[2][2] memory b,
            uint[2] memory c,
            uint[102] memory input
        ) public view returns (bool r) {
        Proof memory proof;
        proof.A = Pairing.G1Point(a[0], a[1]);
        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
        proof.C = Pairing.G1Point(c[0], c[1]);
        uint[] memory inputValues = new uint[](input.length);
        for(uint i = 0; i < input.length; i++){
            inputValues[i] = input[i];
        }
        if (verify(inputValues, proof) == 0) {
            return true;
        } else {
            return false;
        }
    }
}
